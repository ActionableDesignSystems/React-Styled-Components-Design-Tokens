const fsp = require("fs/promises");
const path = require("path");

const DesignTokensOutput = require("../src/theme/design-tokens.tokens.json");

const parseTypographyValues = () => {
  const typography = DesignTokensOutput.typography;
  const typographyValues = {};
  Object.keys(typography).forEach((variant) => {
    typographyValues[variant] = {};
    Object.keys(typography[variant]).forEach((attribute) => {
      typographyValues[variant][attribute] =
        typography[variant][attribute].value;
    });
  });
  return typographyValues;
};

const parseColorValues = () => {
  const colors = DesignTokensOutput.color;
  const themeNames = ["light", "dark"];
  let colorValues = {
    primitives: {},
    lightTheme: {},
    darkTheme: {},
  };
  // primitive colors
  Object.keys(colors).forEach((key) => {
    if (!themeNames.includes(key)) {
      colorValues.primitives[key] = colors[key].value;
    }
  });

  // theme specific colors
  themeNames.forEach((themeName) => {
    const camelCaseThemeName = `${themeName}Theme`; // for our storage
    const lowerCaseThemeName = `${themeName}theme`; // for JSON printout via Design Tokens
    Object.keys(colors[lowerCaseThemeName]).forEach((colorKey) => {
      colorValues[camelCaseThemeName][colorKey] =
        colors[lowerCaseThemeName][colorKey].value;
    });
  });

  return colorValues;
};

async function generateTokenJson() {
  // TYPOGRAPHY
  const typographyValues = parseTypographyValues();

  // COLORS
  const colorValues = parseColorValues();

  const parsedThemeValues = { ...colorValues, typography: typographyValues };

  let data = `/** 
THIS FILE IS AUTOGENERATED
weeeeeeeeeee
steps --> 
1) Download Figma Theme Tokens from starter project in Figma via Design Tokens plugin.
2) Replace design-tokens.tokens.json with the new file.
3) In your console, run: yarn generate-token-json.
*/

// THEME BOILERPLATE VALUES
const sharedThemeValues = { typography: ${JSON.stringify(
    parsedThemeValues.typography
  )} };
const themeShape = { colors:  ${JSON.stringify({
    ...parsedThemeValues.lightTheme,
    ...parsedThemeValues.primitives,
  })}, ...sharedThemeValues};
export const primitiveColors = ${JSON.stringify(parsedThemeValues.primitives)};
export const themeSpecificColorsKeys = ${JSON.stringify(
    Object.keys(parsedThemeValues.lightTheme)
  )};

// TYPES
export type TThemeColorKey = keyof typeof themeShape.colors;
export type TThemeTypographyKey = keyof typeof themeShape.typography;
export type TTheme = typeof themeShape;

// THEMES
export const lightTheme: TTheme = { colors:  ${JSON.stringify({
    ...parsedThemeValues.lightTheme,
    ...parsedThemeValues.primitives,
  })}, ...sharedThemeValues} as const;
export const darkTheme: TTheme = { colors:  ${JSON.stringify({
    ...parsedThemeValues.darkTheme,
    ...parsedThemeValues.primitives,
  })}, ...sharedThemeValues} as const;
`;

  const outputPath = path.join(__dirname, "../src/theme/theme.ts");
  await fsp.writeFile(outputPath, data);
}

generateTokenJson();
